---
  - name: Provision an EC2 Instance
    hosts: local
    connection: local
    gather_facts: False
    
    vars:
      instance_type: t2.micro
      security_group_master: ansible-k8s-master
      security_group_node: ansible-k8s-node
      image: ami-a52a34dc
      keypair: cpenhale
      region: us-west-2
      masters_count: 3
      nodes_count: 2

    tasks:
    
      - name: install the latest version of git 
        become: yes
        yum:
          name: git
          state: latest
        tags:
          - deps
    
      - name: install the latest version of docker
        become: yes
        yum:
          name: docker
          state: latest
        tags:
          - deps
    
      - name: install the latest version of awscli
        become: yes
        yum:
          name: awscli
          state: latest
        tags:
          - deps
      
      - name: install the latest version of curl
        become: yes
        yum:
          name: curl
          state: latest
        tags:
          - deps
      
      - name: install the latest version of python-docker-py
        become: yes
        yum:
          name: python-docker-py
          state: latest
        tags:
          - deps
      
      - name: install the latest version of python-boto
        become: yes
        yum:
          name: python-boto
          state: latest
        tags:
          - deps
    
      
      - name: install the latest version of python-boto3
        become: yes
        yum:
          name: python-boto3
          state: latest
        tags:
          - deps
    
      - name: Get parity sources
        git:
          repo: 'https://github.com/paritytech/parity.git'
          dest: /home/centos/parity
          version: v1.11.0-ci0
          update: no
        tags:
          - source
          
      - name: Start service docker, if not running
        become: yes
        service:
          name: docker
          state: started
        tags:
          - credentials
  
      - name: get docker ecr creds
        shell: "aws ecr get-authorization-token --region {{ region }} --query 'authorizationData[].authorizationToken' --output text | base64 --decode | cut -d: -f2"
        register: ecr_output
        tags:
          - credentials 
          
      - set_fact:
            ecr_password: "{{ ecr_output.stdout }}"
        tags:
          - credentials
          
      - name: Log into private registry
        become: yes
        docker_login:
          registry_url: https://838410721998.dkr.ecr.us-west-2.amazonaws.com
          username: AWS
          password: "{{ ecr_password }}"
          tls_verify: yes
          reauthorize: yes
        tags:
          - credentials
          
      - name: replicate source to parity Dockerfile location
        shell: "rsync -r /home/centos/parity/* /home/centos/parity/docker/centos/ --exclude docker"
        tags: 
          - build-docker 
          
      - name: Check whether dockerfile is busted
        command: grep -Fxq "libudev-devel" /home/centos/parity/docker/centos/Dockerfile
        register: dockerfile_busted
        check_mode: no
        ignore_errors: yes
        changed_when: no
        tags:
          - build-docker
          
      - name: modify busted dockerfile from parity
        replace:
          path: /home/centos/parity/docker/centos/Dockerfile
          regexp: 'file binutils'
          replace: 'file binutils libudev-devel'
          backup: no
        when: dockerfile_busted.rc == 0
        tags:
          - build-docker
                    
      - name: Build parity and with buildargs
        become: yes
        docker_image:
           path: /home/centos/parity/docker/centos/
           name: 838410721998.dkr.ecr.us-west-2.amazonaws.com/test
           tag: latest
           buildargs:
             tag: paritytech/parity:v1.11.0-ci0
        tags:
          - build-docker
    
      - name: Create a the k8s-node security-group
        local_action: 
          module: ec2_group
          name: "{{ security_group_node }}"
          description: Security Group for k8s nodes
          region: "{{ region }}"
          rules:
            - proto: tcp
              from_port: 22
              to_port: 22
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 30000
              to_port: 32767
              cidr_ip: 0.0.0.0/0
          rules_egress:
            - proto: all
              cidr_ip: 0.0.0.0/0
        register: ec2_sg_node
        tags:
          - aws
          
      - set_fact:
          ec2_sg_node_id: "{{ ec2_sg_node.group_id }}"
        tags:
          - aws
          
      - name: Create a the k8s-master security-group
        local_action: 
          module: ec2_group
          name: "{{ security_group_master }}"
          description: Security Group for k8s masters
          region: "{{ region }}"
          rules:
            - proto: tcp
              from_port: 22
              to_port: 22
              cidr_ip: 0.0.0.0/0
          rules_egress:
            - proto: all
              cidr_ip: 0.0.0.0/0
        register: ec2_sg_master
        tags: 
          - aws

      - set_fact:
          ec2_sg_master_id: "{{ ec2_sg_master.group_id }}"
        tags: 
          - aws
          
      - name: Create a the k8s-node security-group with internode comms
        local_action: 
          module: ec2_group
          name: "{{ security_group_node }}-contextual"
          description: Security Group for k8s nodes internode
          region: "{{ region }}"
          rules:
            - proto: all
              group_id: "{{ ec2_sg_node_id }}"
            - proto: all
              group_id: "{{ ec2_sg_master_id }}"
            - proto: udp
              from_port: 8285
              to_port: 8285
              group_id: "{{ ec2_sg_node_id }}"
          rules_egress:
            - proto: all
              cidr_ip: 0.0.0.0/0
        register: basic_firewall
        tags:
          - aws
          
      - name: Create a the k8s-master security-group with internode comms
        local_action: 
          module: ec2_group
          name: "{{ security_group_master }}-contextual"
          description: Security Group for k8s master internode
          region: "{{ region }}"
          rules:
            - proto: tcp
              from_port: 443
              to_port: 443
              group_id: "{{ ec2_sg_node_id }}"
            - proto: tcp
              from_port: 443
              to_port: 443
              group_id: "{{ ec2_sg_master_id }}"
            - proto: tcp
              from_port: 2739
              to_port: 2830
              group_id: "{{ ec2_sg_master_id }}"
            - proto: tcp
              from_port: 2739
              to_port: 2830
              group_id: "{{ ec2_sg_node_id }}"
          rules_egress:
            - proto: all
              cidr_ip: 0.0.0.0/0
        register: basic_firewall
        tags:
          - aws

      - name: Launch the new Masters
        local_action:
          ec2: 
            group: [ '{{ security_group_master }}', '{{ security_group_master }}-contextual' ]
            instance_type: "{{ instance_type}}" 
            image: "{{ image }}" 
            wait: True 
            region: "{{ region }}"
            keypair: "{{ keypair }}"
            count: "{{ masters_count }}"
        register: ec2-masters
        tags:
          - aws
                  
      - name: Add the newly created Masters instance(s) to the local host group
        local_action: lineinfile 
                      dest="./hosts" 
                      regexp={{ item.public_ip }} 
                      insertafter="[k8s-masters]" line={{ item.public_ip }}
        with_items: "{{ ec2-masters.instances }}"
        
      - name: Wait for SSH to come up
        local_action: wait_for 
                      host={{ item.public_ip }} 
                      port=22 
                      state=started
        with_items: "{{ ec2-masters.instances }}"
        tags:
          - aws
          
      - name: Add tag to Instance(s)
        local_action: ec2_tag resource={{ item.id }} region={{ region }} state=present
        with_items: "{{ ec2-masters.instances }}"
        args:
          tags:
            Name: k8s-masters
        tags:
          - aws
          
      - name: Launch the new Nodes
        local_action:
          ec2:
            group: [ '{{ security_group_node }}', '{{ security_group_node }}-contextual' ]
            instance_type: "{{ instance_type}}" 
            image: "{{ image }}" 
            wait: True 
            region: "{{ region }}"
            keypair: "{{ keypair }}"
            count: "{{ nodes_count }}"
        register: ec2-nodes
        tags:
          - aws
          
      - name: Add the newly created Nodes instance(s) to the local host group
        local_action: lineinfile 
                      dest="./hosts" 
                      regexp={{ item.public_ip }} 
                      insertafter="[k8s-nodes]" line={{ item.public_ip }}
        with_items: "{{ ec2-nodes.instances }}"
        tags:
          - aws

      - name: Wait for SSH to come up
        local_action: wait_for 
                      host={{ item.public_ip }} 
                      port=22 
                      state=started
        with_items: "{{ ec2-nodes.instances }}"
        tags:
          - aws
          
      - name: Add tag to Instance(s)
        local_action: ec2_tag resource={{ item.id }} region={{ region }} state=present
        with_items: "{{ ec2-nodes.instances }}"
        args:
          tags:
            Name: k8s-nodes
        tags:
          - aws         