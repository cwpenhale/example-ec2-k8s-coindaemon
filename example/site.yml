---
  - name: Set Up Cloud
    hosts: local
    connection: local
    tags: localinit
    gather_facts: False
    
    vars:
      instance_type: t2.small
      security_group_master: ansible-k8s-master
      security_group_node: ansible-k8s-node
      image: ami-a52a34dc
      keypair: cpenhale
      region: us-west-2
      masters_count: 3
      nodes_count: 2
      disk_size: 500

    tasks:
    
      - name: install the latest version of git 
        become: yes
        yum:
          name: git
          state: latest
        tags:
          - deps
    
      - name: install the latest version of docker
        become: yes
        yum:
          name: docker
          state: latest
        tags:
          - deps
    
      - name: install the latest version of awscli
        become: yes
        yum:
          name: awscli
          state: latest
        tags:
          - deps
      
      - name: install the latest version of curl
        become: yes
        yum:
          name: curl
          state: latest
        tags:
          - deps
      
      - name: install the latest version of python-docker-py
        become: yes
        yum:
          name: python-docker-py
          state: latest
        tags:
          - deps
      
      - name: install the latest version of python-boto
        become: yes
        yum:
          name: python-boto
          state: latest
        tags:
          - deps
    
      
      - name: install the latest version of python-boto3
        become: yes
        yum:
          name: python-boto3
          state: latest
        tags:
          - deps
    
      - name: Get parity sources
        git:
          repo: 'https://github.com/paritytech/parity.git'
          dest: /home/centos/parity
          version: v1.11.0-ci0
          update: no
        tags:
          - source
          
      - name: Start service docker, if not running
        become: yes
        service:
          name: docker
          state: started
        tags:
          - credentials
  
      - name: get docker ecr creds
        shell: "aws ecr get-authorization-token --region {{ region }} --query 'authorizationData[].authorizationToken' --output text | base64 --decode | cut -d: -f2"
        register: ecr_output
        tags:
          - credentials 
          
      - set_fact:
            ecr_password: "{{ ecr_output.stdout }}"
        tags:
          - credentials
          
      - name: Log into private registry
        become: yes
        docker_login:
          registry_url: https://838410721998.dkr.ecr.us-west-2.amazonaws.com
          username: AWS
          password: "{{ ecr_password }}"
          tls_verify: yes
          reauthorize: yes
        tags:
          - credentials
          
      - name: replicate source to parity Dockerfile location
        shell: "rsync -r /home/centos/parity/* /home/centos/parity/docker/centos/ --exclude docker"
        tags: 
          - build-docker 
          
      - name: Check whether dockerfile is busted
        command: grep -Fxq "libudev-devel" /home/centos/parity/docker/centos/Dockerfile
        register: dockerfile_busted
        check_mode: no
        ignore_errors: yes
        changed_when: no
        tags:
          - build-docker
          
      - name: modify busted dockerfile from parity
        replace:
          path: /home/centos/parity/docker/centos/Dockerfile
          regexp: 'file binutils'
          replace: 'file binutils libudev-devel'
          backup: no
        when: dockerfile_busted.rc == 0
        tags:
          - build-docker
                    
      - name: Build parity and with buildargs
        become: yes
        docker_image:
           path: /home/centos/parity/docker/centos/
           name: 838410721998.dkr.ecr.us-west-2.amazonaws.com/test
           tag: latest
           buildargs:
             tag: paritytech/parity:v1.11.0-ci0
        tags:
          - build-docker
    
      - name: Create a the k8s-node security-group
        local_action: 
          module: ec2_group
          name: "{{ security_group_node }}"
          description: Security Group for k8s nodes
          region: "{{ region }}"
          rules:
            - proto: tcp
              from_port: 22
              to_port: 22
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 30000
              to_port: 32767
              cidr_ip: 0.0.0.0/0
          rules_egress:
            - proto: all
              cidr_ip: 0.0.0.0/0
        register: ec2_sg_node
        tags:
          - aws
          
      - set_fact:
          ec2_sg_node_id: "{{ ec2_sg_node.group_id }}"
        tags:
          - aws
          
      - name: Create a the k8s-master security-group
        local_action: 
          module: ec2_group
          name: "{{ security_group_master }}"
          description: Security Group for k8s masters
          region: "{{ region }}"
          rules:
            - proto: tcp
              from_port: 22
              to_port: 22
              cidr_ip: 0.0.0.0/0
          rules_egress:
            - proto: all
              cidr_ip: 0.0.0.0/0
        register: ec2_sg_master
        tags: 
          - aws

      - set_fact:
          ec2_sg_master_id: "{{ ec2_sg_master.group_id }}"
        tags: 
          - aws
          
      - name: Create a the k8s-node security-group with internode comms
        local_action: 
          module: ec2_group
          name: "{{ security_group_node }}-contextual"
          description: Security Group for k8s nodes internode
          region: "{{ region }}"
          rules:
            - proto: all
              group_id: "{{ ec2_sg_node_id }}"
            - proto: all
              group_id: "{{ ec2_sg_master_id }}"
            - proto: udp
              from_port: 8285
              to_port: 8285
              group_id: "{{ ec2_sg_node_id }}"
          rules_egress:
            - proto: all
              cidr_ip: 0.0.0.0/0
        register: ec2_sg_node_contextual
        tags:
          - aws
          
      - name: Create a the k8s-master security-group with internode comms
        local_action: 
          module: ec2_group
          name: "{{ security_group_master }}-contextual"
          description: Security Group for k8s master internode
          region: "{{ region }}"
          rules:
            - proto: tcp
              from_port: 443
              to_port: 443
              group_id: "{{ ec2_sg_node_id }}"
            - proto: tcp
              from_port: 443
              to_port: 443
              group_id: "{{ ec2_sg_master_id }}"
            - proto: tcp
              from_port: 2739
              to_port: 2830
              group_id: "{{ ec2_sg_master_id }}"
            - proto: tcp
              from_port: 2739
              to_port: 2830
              group_id: "{{ ec2_sg_node_id }}"
          rules_egress:
            - proto: all
              cidr_ip: 0.0.0.0/0
        register: ec2_sg_master_contextual
        tags:
          - aws

      - name: Launch the new Masters
        ec2: 
          group: [ '{{ security_group_master }}', '{{ security_group_master }}-contextual' ]
          instance_type: "{{ instance_type}}" 
          image: "{{ image }}" 
          wait: True 
          region: "{{ region }}"
          keypair: "{{ keypair }}"
          count: "{{ masters_count }}"
          volumes:
          - device_name: /dev/xvdb
            volume_type: sc1
            volume_size: "{{disk_size}}"
            delete_on_termination: true
        register: ec2_masters
        tags:
          - aws
          
      - name: Add new instance to masters host group
        add_host:
          name: "{{ item.public_ip }}"
          groups: k8s-masters
        loop: "{{ ec2_masters.instances }}"
        tags:
          - aws
        
      - name: Wait for SSH to come up for masters
        wait_for: 
          host: "{{ item.public_ip }}" 
          port: 22 
          state: started
        loop: "{{ ec2_masters.instances }}"
        tags:
          - aws
          
      - name: Add tag to master Instance(s)
        ec2_tag:
           resource: "{{ item.id }}"
           region: "{{ region }}"
           state: present
        loop: "{{ ec2_masters.instances }}"
        args:
          tags:
            Name: k8s-masters
        tags:
          - aws
          
      - name: Launch the new Nodes
        ec2:
          group: [ '{{ security_group_node }}', '{{ security_group_node }}-contextual' ]
          instance_type: "{{ instance_type}}" 
          image: "{{ image }}" 
          wait: True 
          region: "{{ region }}"
          keypair: "{{ keypair }}"
          count: "{{ nodes_count }}"
          volumes:
          - device_name: /dev/xvdb
            volume_type: sc1
            volume_size: "{{disk_size}}"
            delete_on_termination: true
        register: ec2_nodes
        tags:
          - awsnodes
          
      - name: Add new instance to nodes host group
        add_host:
          name: "{{ item.public_ip }}"
          groups: k8s-nodes
        loop: "{{ ec2_nodes.instances }}"
        tags:
          - awsnodes

      - name: Wait for SSH to come up for nodes
        wait_for:
          host: "{{ item.public_ip }}"
          port: 22 
          state: started
        loop: "{{ ec2_nodes.instances }}"
        tags:
          - awsnodes
          
      - name: Add tag to node Instance(s)
        ec2_tag:
          resource: "{{ item.id }}"
          region: "{{ region }}"
          state: present
        loop: "{{ ec2_nodes.instances }}"
        args:
          tags:
            Name: k8s-nodes
        tags:
          - awsnodes
          
  - name: Install Masters Playbook
    hosts: k8s-masters
    connection: ssh
    gather_facts: False
    tags: postinit
    
    tasks:
    
      - name: extend vg
        become: yes
        lvg:
          vg: atomicos
          pvs: /dev/xvda2,/dev/xvdb
        tags:
          - diskmaster
    
      - name: extend storage on root
        become: yes
        lvol:
          vg: atomicos
          lv: docker-pool
          size: 250G
          resizefs: true
        tags:
          - diskmaster
          
      - name: extend storage on docker
        become: yes
        lvol:
          vg: atomicos
          lv: root
          size: 250G
          resizefs: true
        tags:
          - diskmaster
          
      - name: ostree repo update
        become: yes
        get_url: 
          url: https://raw.githubusercontent.com/CentOS/CentOS-Dockerfiles/master/kubernetes-sig/master/virt7-container-common-candidate.repo
          dest: /etc/yum.repos.d/virt7-container-common-candidate.repo
        tags:
          - containerupmaster
          
      - name: ostree repo update enable
        become: yes
        replace:
          path: /etc/yum.repos.d/virt7-container-common-candidate.repo
          regexp: 'enabled=0'
          replace: 'enabled=1'
        tags:
          - containerupmaster
          
      - name: Check whether registry is edited
        command: grep -Fxq "registry.centos.org" /etc/sysconfig/docker
        register: dockerconfig_edited
        check_mode: no
        ignore_errors: yes
        changed_when: no
        tags:
          - containerupmaster
          
      - name: edit docker registry
        become: yes
        lineinfile:
          path: /etc/sysconfig/docker
          line: "setting --add-registry registry.centos.org"
        when: dockerconfig_edited.rc == 1
        tags:
          - containerupmaster
          
      - name: Start service docker, if not running
        become: yes
        service:
          name: docker
          state: reloaded
        tags:
          - containerupmaster
          
      - name: Upgrade the atomic host platform to the latest version (atomic host upgrade)
        become: yes
        atomic_host:
          revision: latest
        tags:
          - containerupmaster
          
      - name: install kube-apiserver
        become: yes 
        command: atomic install --system --system-package=no --name kube-apiserver registry.centos.org/centos/kubernetes-sig-apiserver:latest
        ignore_errors: yes
        tags:
          - containerupmaster

      - name: Start service kube-apiserver, if not running
        become: yes
        service:
          name: kube-apiserver
          state: started
        tags:
          - containerupmaster
          
      - name: install kube-scheduler
        become: yes 
        command: atomic install --system --system-package=no --name kube-scheduler registry.centos.org/centos/kubernetes-sig-scheduler:latest
        ignore_errors: yes
        tags:
          - containerupmaster
          
      - name: Start service kube-scheduler, if not running
        become: yes
        service:
          name: kube-scheduler
          state: started
        tags:
          - containerupmaster
          
      - name: install kube-controller-manager
        become: yes 
        command: atomic install --system --system-package=no --name kube-controller-manager registry.centos.org/centos/kubernetes-sig-controller-manager:latest
        ignore_errors: yes
        tags:
          - containerupmaster
          
      - name: Start service kube-controller-manager, if not running
        become: yes
        service:
          name: kube-controller-manager
          state: started
        tags:
          - containerupmaster
          
 
               
  - name: Install Nodes Playbook
    hosts: k8s-nodes
    connection: ssh
    gather_facts: False
    tags: postinit-nodes
    
    tasks:
    
      - name: extend vg
        become: yes
        lvg:
          vg: atomicos
          pvs: /dev/xvda2,/dev/xvdb
        tags:
          - disknode
    
      - name: extend storage on root
        become: yes
        lvol:
          vg: atomicos
          lv: docker-pool
          size: 250G
          resizefs: true
        tags:
          - disknode
          
      - name: extend storage on docker
        become: yes
        lvol:
          vg: atomicos
          lv: root
          size: 250G
          resizefs: true
        tags:
          - disknode
          
      - name: ostree repo update
        become: yes
        get_url: 
          url: https://raw.githubusercontent.com/CentOS/CentOS-Dockerfiles/master/kubernetes-sig/master/virt7-container-common-candidate.repo
          dest: /etc/yum.repos.d/virt7-container-common-candidate.repo
        tags:
          - containerupnodes
          
      - name: ostree repo update enable
        become: yes
        replace:
          path: /etc/yum.repos.d/virt7-container-common-candidate.repo
          regexp: 'enabled=0'
          replace: 'enabled=1'
        tags:
          - containerupnodes
          
      - name: Check whether registry is edited
        command: grep -Fxq "registry.centos.org" /etc/sysconfig/docker
        register: dockerconfig_edited
        check_mode: no
        ignore_errors: yes
        changed_when: no
        tags:
          - containerupnodes
          
      - name: edit docker registry
        become: yes
        lineinfile:
          path: /etc/sysconfig/docker
          line: "setting --add-registry registry.centos.org"
        when: dockerconfig_edited.rc == 1
        tags:
          - containerupnodes
          
      - name: Start service docker, if not running
        become: yes
        service:
          name: docker
          state: reloaded
        tags:
          - containerupnodes
          
      - name: Upgrade the atomic host platform to the latest version (atomic host upgrade)
        become: yes
        atomic_host:
          revision: latest
        tags:
          - containerupnodes
          
      - name: install kubelet
        become: yes 
        command: atomic install --system --system-package=no --name kubelet registry.centos.org/centos/kubernetes-sig-kubelet:latest
        ignore_errors: yes
        tags:
          - containerupnodes

      - name: Start service kubelet, if not running
        become: yes
        service:
          name: kubelet
          state: started
        tags:
          - containerupnodes
          
      - name: install kube-proxy
        become: yes 
        command: atomic install --system --system-package=no --name kube-proxy registry.centos.org/centos/kubernetes-sig-proxy:latest
        ignore_errors: yes
        tags:
          - containerupnodes
          
      - name: Start service kube-proxy, if not running
        become: yes
        service:
          name: kube-proxy
          state: started
        tags:
          - containerupnodes